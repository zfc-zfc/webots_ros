// Generated by gencpp from file webots_ros/save_imageRequest.msg
// DO NOT EDIT!


#ifndef WEBOTS_ROS_MESSAGE_SAVE_IMAGEREQUEST_H
#define WEBOTS_ROS_MESSAGE_SAVE_IMAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace webots_ros
{
template <class ContainerAllocator>
struct save_imageRequest_
{
  typedef save_imageRequest_<ContainerAllocator> Type;

  save_imageRequest_()
    : filename()
    , quality(0)  {
    }
  save_imageRequest_(const ContainerAllocator& _alloc)
    : filename(_alloc)
    , quality(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  _filename_type filename;

   typedef int32_t _quality_type;
  _quality_type quality;





  typedef boost::shared_ptr< ::webots_ros::save_imageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::webots_ros::save_imageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct save_imageRequest_

typedef ::webots_ros::save_imageRequest_<std::allocator<void> > save_imageRequest;

typedef boost::shared_ptr< ::webots_ros::save_imageRequest > save_imageRequestPtr;
typedef boost::shared_ptr< ::webots_ros::save_imageRequest const> save_imageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::webots_ros::save_imageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::webots_ros::save_imageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::webots_ros::save_imageRequest_<ContainerAllocator1> & lhs, const ::webots_ros::save_imageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.filename == rhs.filename &&
    lhs.quality == rhs.quality;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::webots_ros::save_imageRequest_<ContainerAllocator1> & lhs, const ::webots_ros::save_imageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace webots_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::webots_ros::save_imageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::webots_ros::save_imageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::webots_ros::save_imageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::webots_ros::save_imageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::webots_ros::save_imageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::webots_ros::save_imageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::webots_ros::save_imageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5654361703436d7664b741cb4281bfdf";
  }

  static const char* value(const ::webots_ros::save_imageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5654361703436d76ULL;
  static const uint64_t static_value2 = 0x64b741cb4281bfdfULL;
};

template<class ContainerAllocator>
struct DataType< ::webots_ros::save_imageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "webots_ros/save_imageRequest";
  }

  static const char* value(const ::webots_ros::save_imageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::webots_ros::save_imageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string filename\n"
"int32 quality\n"
;
  }

  static const char* value(const ::webots_ros::save_imageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::webots_ros::save_imageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.filename);
      stream.next(m.quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct save_imageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::webots_ros::save_imageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::webots_ros::save_imageRequest_<ContainerAllocator>& v)
  {
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filename);
    s << indent << "quality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.quality);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WEBOTS_ROS_MESSAGE_SAVE_IMAGEREQUEST_H
